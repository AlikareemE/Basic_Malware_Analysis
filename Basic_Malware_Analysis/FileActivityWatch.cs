using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;

namespace Basic_Malware_Analysis
{
    public partial class FileActivityWatch : Form
    {
        FileSystemWatcher watcher;
         
        public FileActivityWatch()
        {
            InitializeComponent();
        }

        private void FileActivityWatch_Load(object sender, EventArgs e)
        {
            folderBrowserDialog1.SelectedPath = Environment.GetFolderPath(Environment.SpecialFolder.MyComputer);

        }

        private void startButton_Click(object sender, EventArgs e)
        {
            if (Directory.Exists(folderBrowserDialog1.SelectedPath))
            {
                watcher = new FileSystemWatcher();
                watcher.Path = folderBrowserDialog1.SelectedPath;
                watcher.NotifyFilter = NotifyFilters.LastAccess | NotifyFilters.LastWrite
                                       | NotifyFilters.FileName | NotifyFilters.DirectoryName;
                watcher.Filter = "*.*";
                watcher.Changed += new FileSystemEventHandler(OnChanged);
                watcher.Created += new FileSystemEventHandler(OnChanged);
                watcher.Deleted += new FileSystemEventHandler(OnChanged);
                watcher.Renamed += new RenamedEventHandler(OnRenamed);
                watcher.EnableRaisingEvents = true;

                startButton.Enabled = false;
                stopButton.Enabled = true;
                directoryTextBox.ReadOnly = true;
                SetStatus("Monitoring started...");
            }
            else
            {
                MessageBox.Show("The directory does not exist.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void stopButton_Click(object sender, EventArgs e)
        {
            watcher.EnableRaisingEvents = false;
            watcher.Dispose();

            startButton.Enabled = true;
            stopButton.Enabled = false;
            directoryTextBox.ReadOnly = false;
            SetStatus("Monitoring stopped.");
        }
        private void OnChanged(object source, FileSystemEventArgs e)
        {
            AddEventToListBox("File " + e.FullPath + " " + e.ChangeType);
        }

        private void OnRenamed(object source, RenamedEventArgs e)
        {
            AddEventToListBox("File " + e.OldFullPath + " renamed to " + e.FullPath);
        }

        private void AddToListBox(string status)
        {
             
        }

        private void SetStatus(string text)
        {
            if (statusLabel.InvokeRequired)
            {
                statusLabel.Invoke((MethodInvoker)delegate
                {
                    statusLabel.Text = text;
                });
            }
            else
            {
                statusLabel.Text = text;
            }
        }
        private void AddEventToListBox(string text)
        {
            if (eventsListBox.InvokeRequired)
            {
                eventsListBox.Invoke((MethodInvoker)delegate
                {
                    eventsListBox.Items.Add(text);
                });
            }
            else
            {
                eventsListBox.Items.Add(text);
            }
        }
        private void browseButton_Click(object sender, EventArgs e)
        {
            if (folderBrowserDialog1.ShowDialog() == DialogResult.OK)
            {
                directoryTextBox.Text = folderBrowserDialog1.SelectedPath;
            }
        }

        private void Save_Click(object sender, EventArgs e)
        {
            SaveFileDialog saveFileDialog1 = new SaveFileDialog();
            saveFileDialog1.Filter = "Text files (*.txt)|*.txt|All files (*.*)|*.*";
            saveFileDialog1.FilterIndex = 1;
            saveFileDialog1.RestoreDirectory = true;

            if (saveFileDialog1.ShowDialog() == DialogResult.OK)
            {
                using (StreamWriter writer = new StreamWriter(saveFileDialog1.FileName))
                {
                    foreach (var item in eventsListBox.Items)
                    {
                        writer.WriteLine(item);
                    }
                }

                MessageBox.Show("Events saved to file.", "Information", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
        }
    }
}
