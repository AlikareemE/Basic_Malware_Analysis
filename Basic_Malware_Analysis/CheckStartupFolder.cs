using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Management;
using System.Management.Automation;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using Microsoft.Win32;
using System.Diagnostics;
using System.Windows.Forms;
using System.Security.Cryptography;

namespace Basic_Malware_Analysis
{
    public partial class CheckStartupFolder : Form
    {
        protected ListView listView1;

        public CheckStartupFolder()
        {
            InitializeComponent();
        }





        private void CheckStartupFolder_Load(object sender, EventArgs e)
        {


            // Create a ListView control with columns for the application name, status, value, and process ID
            listView1 = new ListView();
            listView1.Dock = DockStyle.Fill;
            listView1.View = View.Details;
            listView1.FullRowSelect = true;
            listView1.Columns.Add("Name", 120, HorizontalAlignment.Left);
            listView1.Columns.Add("Status", 80, HorizontalAlignment.Left);
            listView1.Columns.Add("Value", 200, HorizontalAlignment.Left);
            listView1.Columns.Add("Process ID", 80, HorizontalAlignment.Left);
            listView1.Columns.Add("Hash", 120, HorizontalAlignment.Left);
            this.Controls.Add(listView1);

            // Open the registry key for the current user's startup folder
            RegistryKey startupKey = Registry.CurrentUser.OpenSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run", true);

            // Get all the values (i.e., programs) in the startup folder
            string[] startupPrograms = startupKey.GetValueNames();

            // Add each startup program and its information to the ListView control
            foreach (string program in startupPrograms)
            {
                string programPath = (string)startupKey.GetValue(program);
                Process[] processes = Process.GetProcessesByName(program.Replace(".exe", ""));
                string hash = "";

                if (File.Exists(programPath))
                {
                    // Generate the hash value of the file
                    using (var md5 = MD5.Create())
                    {
                        using (var stream = File.OpenRead(programPath))
                        {
                            byte[] hashBytes = md5.ComputeHash(stream);
                            StringBuilder sb = new StringBuilder();
                            foreach (byte b in hashBytes)
                            {
                                sb.Append(b.ToString("x2"));
                            }
                            hash = sb.ToString();
                        }
                    }
                }

                if (processes.Length > 0)
                {
                    // The startup program is running
                    foreach (Process process in processes)
                    {
                        ListViewItem item = new ListViewItem(new string[] { program, "Running", programPath, process.Id.ToString(), hash });
                        listView1.Items.Add(item);
                    }
                }
                else
                {
                    // The startup program is not running
                    ListViewItem item = new ListViewItem(new string[] { program, "Not Running", programPath, "N/A", hash });
                    listView1.Items.Add(item);
                }
            }

            // Close the registry key
            startupKey.Close();
        }

    }

 }

